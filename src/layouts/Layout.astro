---
import "@fontsource-variable/inter";
import "@fontsource-variable/jetbrains-mono";
import { getImage } from "astro:assets";
import noisy from "../assets/Grain.png";
import noisySvg from "../assets/noise.svg";
import ClientTime from "../components/ClientTime";

interface Props {
  title: string;
  description?: string;
}

const { title, description = "Josh's personal site" } = Astro.props;

const optimizedBackground = await getImage({ src: noisy, format: "webp" });

const noiseBackgroundUrl = `url(${optimizedBackground.src})`;
const noiseBackgroundSvg = `url(${noisySvg.src})`;
const darkColor = "#181615";
const lightColor = "#ebebec";
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      id="apple-status-bar"
      content="default"
    />
    <meta name="theme-color" id="theme-color" content={darkColor} />
    <!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body
    class="min-w-[100dvw] min-h-[100dvh] bg-stone-50 dark:bg-stone-950 dark:text-zinc-50"
    data-darkcolor={darkColor}
    data-lightcolor={lightColor}
  >
    <slot />
    <footer class="mt-56 px-4">
      <div class="w-full h-[1px] bg-zinc-500 dark:bg-zinc-600 slight-x-mask">
      </div>
      <section class="mx-auto max-w-2xl py-10 font-mono text-pretty space-y-8">
        <div>
          <a href="/" class="font-mono">Joshua Constantine Santos</a>
          <p class="text-sm">
            <span class="text-zinc-500 dark:text-zinc-400">
              connect with me
            </span>
            <a
              href="https://www.twitter.com/mrnicericee"
              target="_blank"
              class="underline">@Twitter</a
            >
            <span class="text-zinc-500 dark:text-zinc-400"> or on </span>
            <a
              href="https://www.linkedin.com/in/joshua-constantine-santos/"
              target="_blank"
              class="underline">LinkedIn</a
            ><span class="text-zinc-500 dark:text-zinc-400"
              >. Look through some of my code on
            </span>
            <a
              href="https://github.com/mrnicericee"
              target="_blank"
              class="underline"
            >
              GitHub</a
            >
          </p>
        </div>
        <p class="text-sm">
          <span class="text-zinc-500 dark:text-zinc-400">
            Silly little guy made by
          </span>
          <a href="gyuppii.carrd.co" target="_blank" class="underline"
            >Gyuppii</a
          ><astro-blurrable data-status="idle"
            ><span class="text-zinc-500 dark:text-zinc-400"
              >. I absolutely love the silly little guy, on mobile he goes to
              the bottom right corner and just chills.
            </span>
          </astro-blurrable>
        </p>
        <div class="space-y-2 text-sm">
          <ClientTime client:visible />
          <p>
            current server time <span class="tabular-nums"
              >{
                Intl.DateTimeFormat(undefined, {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                  hour: "numeric",
                  minute: "numeric",
                  second: "numeric",
                }).format(new Date())
              }</span
            >
          </p>
          <p>
            Built in
            <a href="https://astro.build/" target="_blank" class="underline"
              >Astro</a
            >, made with ‚ù§Ô∏è
          </p>
        </div>
      </section>
    </footer>
    <!-- grainy overlay -->
    <div class="grainy-light dark:grainy-dark z-50"></div>
  </body>
</html>

<style
  is:global
  define:vars={{
    noiseUrl: noiseBackgroundUrl,
    noiseSvg: noiseBackgroundSvg,
    darkColor,
    lightColor,
  }}
>
  :root {
    --mask-left-start: 25%;
    --mask-left-end: 75%;
  }

  @keyframes static {
    from {
      transform: translateX(-1000px);
    }

    33% {
      transform: translateY(-1000px);
    }

    66% {
      transform: translateX(1000px);
    }

    to {
      transform: translateY(1000px);
    }
  }

  body {
    font-family: "Inter Variable", sans-serif;
  }
  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }
</style>

<!-- <script define:vars={{ darkColor, lightColor }}> -->
<script>
  const theme = () => {
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)"
    ).matches;
    const body = document.querySelector("body");
    const darkColor = body?.getAttribute("data-darkcolor");
    const lightColor = body?.getAttribute("data-lightcolor");

    const metaThemeColor = document.querySelector('meta[name="theme-color"]');
    const metaAppleStatusBar = document.querySelector(
      'meta[name="apple-mobile-web-app-status-bar-style"]'
    );

    if (prefersDark) {
      document.documentElement.classList.add("dark");
      metaThemeColor?.setAttribute("content", darkColor ?? "#181615");
      metaAppleStatusBar?.setAttribute("content", "black-translucent");
      return;
    }
    document.documentElement.classList.remove("dark");
    metaThemeColor?.setAttribute("content", lightColor ?? "");
    metaAppleStatusBar?.setAttribute("content", "default");
  };

  theme();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", theme);
</script>

<script>
  // i could move this to a component, but...
  // i saw it adds extra script files ü§∑üèΩ so i'm keeping it here
  const activeBlurrable = new Set<Blurrable>();

  class Blurrable extends HTMLElement {
    private _status: "idle" | "active" = "idle";
    // if idle = blur(4px)
    // if active = blur(0px)
    constructor() {
      super();
      this.setAttribute(
        "class",
        "transition-all duration-200 ease-in-out cursor-pointer data-[status=idle]:blur-sm"
        // redacted look
        // "transition-all duration-200 ease-in-out data-[status=idle]:bg-zinc-900 data-[status=idle]:text-transparent dark:data-[status=idle]:bg-stone-200"
      );
      this._status =
        this.getAttribute("data-status") === "active" ? "active" : "idle";

      this.addEventListener("click", this.toggleStatus.bind(this));
      // if a mobile device, then do not add hover events
      if (!("ontouchstart" in window)) {
        this.addEventListener("mouseenter", () => (this.status = "active"));
      }
    }

    get status(): "idle" | "active" {
      return this._status;
    }

    set status(value: "idle" | "active") {
      if (value === "idle" || value === "active") {
        this._status = value;
        this.dataset.status = value;
      }
      if (value === "active") {
        activeBlurrable.add(this);
        // unsure if this is good UX, i mean it's cool but feels weird
        // if (activeBlurrable.size > 1) {
        //   // that means we need to remove active from all other blurrable elements
        //   activeBlurrable.forEach((blurrable) => {
        //     if (blurrable !== this) {
        //       blurrable.status = "idle";
        //     }
        //   });
        // }
      }
    }

    private toggleStatus(event: MouseEvent) {
      event.stopPropagation();
      this.status = this.status === "active" ? "idle" : "active";
    }
  }

  customElements.define("astro-blurrable", Blurrable);

  document.addEventListener("click", (event) => {
    // click anywhere else to remove active on non target blurrable elements
    // if event target is blurrable element, then do nothing
    if (event.target instanceof Blurrable) {
      return;
    }
    activeBlurrable.forEach((blurrable) => {
      if (!blurrable.contains(event.target as Node)) {
        blurrable.status = "idle";
        activeBlurrable.delete(blurrable);
      }
    });
  });
</script>
